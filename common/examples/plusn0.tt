let plus (n m : nat) : nat = natelim lzero (fun p : nat => nat) m (fun p : nat => succ) n

in

natelim lzero
(fun q : nat => eq lzero nat (plus q zero) q)
(refl lzero nat zero)
(
fun k : nat =>
fun IH : eq lzero nat (plus k zero) k =>
eqelim lzero lzero nat (plus k zero) (fun t : nat => eq lzero nat (plus (succ k) zero) (succ t)) (refl lzero nat (plus (succ k) zero)) k IH
)

: forall n : nat, eq lzero nat (plus n zero) n
