let lone : level = lsucc lzero

and type0 : type lone = type lzero

and type1 : type (lsucc lone) = type lone

and binaryrelation (A : type0) : type1 = A -> A -> type0

and reflexive (A : type0) (rel : binaryrelation A) : type0 = forall x : A, rel x x

and symmetric (A : type0) (rel : binaryrelation A) : type0 = forall x y : A, rel x y -> rel y x

and transitive (A : type0) (rel : binaryrelation A) : type0 = forall x y z : A, rel x y -> rel y z -> rel x z

and equivrelation (A : type0) (rel : binaryrelation A) : type0 = prod lzero lzero (reflexive A rel) (prod lzero lzero (symmetric A rel) (transitive A rel))

and setoid : type1 = ex lone lone type0 (fun A : type0 => ex lone lzero (binaryrelation A) (fun rel : binaryrelation A => equivrelation A rel))

and relationby (A B : type0) (f : A -> B) : binaryrelation A = fun (x y : A) => eq lzero B (f x) (f y)

in

unit
